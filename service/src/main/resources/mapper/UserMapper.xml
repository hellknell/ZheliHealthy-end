<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.Yu.his.service.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.Yu.his.service.domain.User">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="open_id" jdbcType="VARCHAR" property="openId"/>
        <result column="photo" jdbcType="VARCHAR" property="photo"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="sex" jdbcType="CHAR" property="sex"/>
        <result column="tel" jdbcType="CHAR" property="tel"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="hiredate" jdbcType="DATE" property="hiredate"/>
        <result column="root" jdbcType="BIT" property="root"/>
        <result column="dept_id" jdbcType="INTEGER" property="deptId"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.Yu.his.service.domain.User">
        <result column="role" jdbcType="LONGVARCHAR" property="role"/>
    </resultMap>
    <sql id="Base_Column_List">
        id
        , username, password, open_id, photo, name, sex, tel, email, hiredate, root, dept_id,
    status, create_time
    </sql>
    <sql id="Blob_Column_List">
        role
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from tb_user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from tb_user
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.Yu.his.service.domain.User">
        insert into tb_user (id, username, password,
                             open_id, photo, name,
                             sex, tel, email, hiredate,
                             root, dept_id, status, create_time,
                             role)
        values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
                #{openId,jdbcType=VARCHAR}, #{photo,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
                #{sex,jdbcType=CHAR}, #{tel,jdbcType=CHAR}, #{email,jdbcType=VARCHAR}, #{hiredate,jdbcType=DATE},
                #{root,jdbcType=BIT}, #{deptId,jdbcType=INTEGER}, #{status,jdbcType=TINYINT},
                #{createTime,jdbcType=TIMESTAMP},
                #{role,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.Yu.his.service.domain.User">
        insert into tb_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="openId != null">
                open_id,
            </if>
            <if test="photo != null">
                photo,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="tel != null">
                tel,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="hiredate != null">
                hiredate,
            </if>
            <if test="root != null">
                root,
            </if>
            <if test="deptId != null">
                dept_id,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="role != null">
                role,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="openId != null">
                #{openId,jdbcType=VARCHAR},
            </if>
            <if test="photo != null">
                #{photo,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=CHAR},
            </if>
            <if test="tel != null">
                #{tel,jdbcType=CHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="hiredate != null">
                #{hiredate,jdbcType=DATE},
            </if>
            <if test="root != null">
                #{root,jdbcType=BIT},
            </if>
            <if test="deptId != null">
                #{deptId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="role != null">
                #{role,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.Yu.his.service.domain.User">
        update tb_user
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="openId != null">
                open_id = #{openId,jdbcType=VARCHAR},
            </if>
            <if test="photo != null">
                photo = #{photo,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=CHAR},
            </if>
            <if test="tel != null">
                tel = #{tel,jdbcType=CHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="hiredate != null">
                hiredate = #{hiredate,jdbcType=DATE},
            </if>
            <if test="root != null">
                root = #{root,jdbcType=BIT},
            </if>
            <if test="deptId != null">
                dept_id = #{deptId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="role != null">
                role = #{role,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.Yu.his.service.domain.User">
        update tb_user
        set username    = #{username,jdbcType=VARCHAR},
            password    = #{password,jdbcType=VARCHAR},
            open_id     = #{openId,jdbcType=VARCHAR},
            photo       = #{photo,jdbcType=VARCHAR},
            name        = #{name,jdbcType=VARCHAR},
            sex         = #{sex,jdbcType=CHAR},
            tel         = #{tel,jdbcType=CHAR},
            email       = #{email,jdbcType=VARCHAR},
            hiredate    = #{hiredate,jdbcType=DATE},
            root        = #{root,jdbcType=BIT},
            dept_id     = #{deptId,jdbcType=INTEGER},
            status      = #{status,jdbcType=TINYINT},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            role        = #{role,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.Yu.his.service.domain.User">
        update tb_user
        set username    = #{username,jdbcType=VARCHAR},
            password    = #{password,jdbcType=VARCHAR},
            open_id     = #{openId,jdbcType=VARCHAR},
            photo       = #{photo,jdbcType=VARCHAR},
            name        = #{name,jdbcType=VARCHAR},
            sex         = #{sex,jdbcType=CHAR},
            tel         = #{tel,jdbcType=CHAR},
            email       = #{email,jdbcType=VARCHAR},
            hiredate    = #{hiredate,jdbcType=DATE},
            root        = #{root,jdbcType=BIT},
            dept_id     = #{deptId,jdbcType=INTEGER},
            status      = #{status,jdbcType=TINYINT},
            create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="list" parameterType="com.Yu.his.generator.help.MyBatisWrapper" resultMap="BaseResultMap">
        <include refid="listSql"/>
    </select>
    <sql id="listSql">
        select
        <if test="selectBuilder == null">
            *
        </if>
        <if test="selectBuilder != null">
            <trim prefixOverrides="," suffixOverrides=",">
                ${selectBuilder}
            </trim>
        </if>
        from tb_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="groupBySql != null">
            group by ${groupBySql}
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="rows != null">
            <if test="offset != null">
                limit ${offset}, ${rows}
            </if>
            <if test="offset == null">
                limit ${rows}
            </if>
        </if>
    </sql>
    <sql id="Example_Where_Clause">
        <where>
            <trim prefixOverrides="and | or">
                <foreach collection="oredCriteria" item="criteria">
                    <if test="criteria.valid">
                        <if test="criteria.andOrOr">
                            and
                        </if>
                        <if test="!criteria.andOrOr">
                            or
                        </if>
                        <trim prefix="(" prefixOverrides="and | or" suffix=")">
                            <foreach collection="criteria.criteria" item="criterion">
                                <choose>
                                    <when test="criterion.noValue">
                                        ${criterion.condition}
                                    </when>
                                    <when test="criterion.singleValue">
                                        ${criterion.condition} #{criterion.value, jdbcType=${criterion.jdbcType}}
                                    </when>
                                    <when test="criterion.betweenValue">
                                        ${criterion.condition} #{criterion.value, jdbcType=${criterion.jdbcType}} and
                                        #{criterion.secondValue, jdbcType=${criterion.jdbcType}}
                                    </when>
                                    <when test="criterion.listValue">
                                        ${criterion.condition}
                                        <foreach close=")" collection="criterion.value" item="listItem" open="("
                                                 separator=",">
                                            #{listItem, jdbcType=${criterion.jdbcType}}
                                        </foreach>
                                    </when>
                                </choose>
                            </foreach>
                        </trim>
                    </if>
                </foreach>
            </trim>
        </where>
    </sql>
    <delete id="deleteField" parameterType="com.Yu.his.generator.help.MyBatisWrapper">
        delete from tb_user
        <include refid="Update_By_Example_Where_Clause"/>
    </delete>
    <select id="topOne" parameterType="com.Yu.his.generator.help.MyBatisWrapper" resultMap="BaseResultMap">
        select
        <if test="selectBuilder != null">
            <trim prefixOverrides="," suffixOverrides=",">
                ${selectBuilder}
            </trim>
        </if>
        from tb_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        limit 1
    </select>

    <select id="count" parameterType="com.Yu.his.generator.help.MyBatisWrapper" resultType="java.lang.Integer">
        <include refid="countSql"/>
    </select>
    <sql id="countSql">
        select count(*) total_count from tb_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </sql>
    <update id="updateField" parameterType="com.Yu.his.generator.help.MyBatisWrapper">
        update tb_user
        set
        <trim prefixOverrides="," suffixOverrides=",">
            ${example.updateSql}
        </trim>
        <if test="example.updateSql != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <trim prefixOverrides="and | or">
                <foreach collection="example.oredCriteria" item="criteria" separator="or">
                    <if test="criteria.andOrOr">
                        and
                    </if>
                    <if test="!criteria.andOrOr">
                        or
                    </if>
                    <if test="criteria.valid">
                        <trim prefix="(" prefixOverrides="and" suffix=")">
                            <foreach collection="criteria.criteria" item="criterion">
                                <choose>
                                    <when test="criterion.noValue">
                                        ${criterion.condition}
                                    </when>
                                    <when test="criterion.singleValue">
                                        ${criterion.condition} #{criterion.value, jdbcType=${criterion.jdbcType}}
                                    </when>
                                    <when test="criterion.betweenValue">
                                        ${criterion.condition} #{criterion.value, jdbcType=${criterion.jdbcType}} and
                                        #{criterion.secondValue, jdbcType=${criterion.jdbcType}}
                                    </when>
                                    <when test="criterion.listValue">
                                        ${criterion.condition}
                                        <foreach close=")" collection="criterion.value" item="listItem" open="("
                                                 separator=",">
                                            #{listItem, jdbcType=${criterion.jdbcType}}
                                        </foreach>
                                    </when>
                                </choose>
                            </foreach>
                        </trim>
                    </if>
                </foreach>
            </trim>
        </where>
    </sql>
    <update id="updateFieldBatch" parameterType="java.util.List">
        <foreach collection="list" index="index" item="example" separator=";">
            update tb_user
            set
            <trim prefixOverrides="," suffixOverrides=",">
                ${example.updateSql}
            </trim>
            <if test="example != null">
                <include refid="Update_By_Example_Where_Clause"/>
            </if>
        </foreach>
    </update>
    <select id="get" parameterType="com.Yu.his.generator.help.MyBatisWrapper" resultMap="BaseResultMap">
        select
        <if test="selectBuilder != null">
            <trim prefixOverrides="," suffixOverrides=",">
                ${selectBuilder}
            </trim>
        </if>
        from tb_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <insert id="insertBatch" keyColumn="id" keyProperty="id" parameterType="java.util.Collection"
            useGeneratedKeys="true">
        insert into tb_user (username, password, open_id, photo, name, sex, tel, email, hiredate, root, dept_id, status,
        create_time, role) values
        <foreach collection="list" index="index" item="item" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                #{item.username, jdbcType=VARCHAR},
                #{item.password, jdbcType=VARCHAR},
                #{item.openId, jdbcType=VARCHAR},
                #{item.photo, jdbcType=VARCHAR},
                #{item.name, jdbcType=VARCHAR},
                #{item.sex, jdbcType=CHAR},
                #{item.tel, jdbcType=CHAR},
                #{item.email, jdbcType=VARCHAR},
                #{item.hiredate, jdbcType=DATE},
                #{item.root, jdbcType=BIT},
                #{item.deptId, jdbcType=INTEGER},
                #{item.status, jdbcType=TINYINT},
                #{item.createTime, jdbcType=TIMESTAMP},
                #{item.role, jdbcType=LONGVARCHAR},
            </trim>
        </foreach>
    </insert>
    <update id="updateBatchSelective" parameterType="java.util.List">
        update tb_user
        <set>
            <trim prefix="id = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.id != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.id,jdbcType=INTEGER}
                    </if>
                </foreach>
            </trim>
            <trim prefix="username = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.username != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.username,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="password = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.password != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.password,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="open_id = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.openId != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.openId,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="photo = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.photo != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.photo,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="name = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.name != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.name,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="sex = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.sex != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.sex,jdbcType=CHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="tel = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.tel != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.tel,jdbcType=CHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="email = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.email != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.email,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="hiredate = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.hiredate != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.hiredate,jdbcType=DATE}
                    </if>
                </foreach>
            </trim>
            <trim prefix="root = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.root != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.root,jdbcType=BIT}
                    </if>
                </foreach>
            </trim>
            <trim prefix="dept_id = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.deptId != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.deptId,jdbcType=INTEGER}
                    </if>
                </foreach>
            </trim>
            <trim prefix="status = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.status != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.status,jdbcType=TINYINT}
                    </if>
                </foreach>
            </trim>
            <trim prefix="create_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.createTime != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.createTime,jdbcType=TIMESTAMP}
                    </if>
                </foreach>
            </trim>
            <trim prefix="role = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.role != null">
                        when id = #{item.id,jdbcType=INTEGER} then #{item.role,jdbcType=LONGVARCHAR}
                    </if>
                </foreach>
            </trim>
        </set>
        where id in
        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item.id,jdbcType=INTEGER}
        </foreach>
    </update>
    <select id="selectUserPermissions" parameterType="int" resultType="string">
        SELECT p.permission_name
        from tb_user u
                 join tb_role r on JSON_CONTAINS(u.role, CONVERT(r.id, CHAR))
                 join tb_permission p on JSON_contains(r.permissions, CONVERT(p.id, CHAR))
        where u.id = #{id,jdbcType=INTEGER}
          and u.`status` = 1
    </select>

    <select id="selectUserList"  resultType="com.Yu.his.service.vo.UserListVO"
            parameterType="com.Yu.his.service.po.UserQueryPo">
        SELECT DISTINCT u.id as id,
        u.name as name,
        u.sex as sex,
        u.tel as tel,
        u.email as email,
        d.dept_name as dept,
        u.hiredate as hireDate,
        u.root as root,
        u.status as status,
        (SELECT GROUP_CONCAT(role_name separator ",")
        from tb_role r
        where JSON_contains(u.role, CONVERT(r.id, CHAR))) as roles

        from tb_user u
        join tb_role r on JSON_contains(u.role, CAST(r.id as CHAR))
        left join tb_dept d on u.dept_id = d.id

        <where>
            <if test="name!=null">
                AND u.name like concat('%',#{name},'%')
            </if>
            <if test="sex!=null">
                AND u.sex=#{sex}
            </if>
            <if test="role!=null">
                AND r.role_name=#{role}
            </if>
            <if test="deptId!=null">
                AND d.id =#{deptId}
            </if>
            <if test="status!=null">
                AND u.status=#{status}
            </if>
        </where>
        order by u.id ASC
        LIMIT #{start} ,#{pageSize}
    </select>
    <select id="Count" resultType="long" parameterType="com.Yu.his.service.po.UserQueryPo">
        SELECT count(*)
        from (
        SELECT DISTINCT u.id
        from tb_user u
        inner
        join tb_role r on JSON_CONTAINS(u.role, CAST(r.id AS  CHAR))
        <where>
            <if test="name!=null">
                AND u.name like concat('%',#{name},'%')
            </if>
            <if test="sex!=null">
                AND u.sex=#{sex}
            </if>
            <if test="role!=null">
                AND r.role_name=#{role}
            </if>
            <if test="deptId!=null">
                AND u.dept_id =#{deptId}
            </if>
            <if test="status!=null">
                AND u.status=#{status}
            </if>
        </where>
        ) as temp;
    </select>
</mapper>